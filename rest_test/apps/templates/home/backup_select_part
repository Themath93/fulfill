<script type="text/javascript">

// 실시간 재고 데이터 받기
var data_sys = '{{ data_ts|safe }}';
var json_data_sys = JSON.parse(data_sys);
var json_ir_orders = JSON.parse('{{ json_irs|safe }}');

var ir_order_div = document.getElementById('ir_order');
var ir_hidden_div = document.getElementById('ir_order_content');
query_irs = json_ir_orders;
  // part_list 보여주기
var service_stock = document.getElementById('service_stock');
var hidden_div = document.getElementById('service_part_content');
var std_day = json_data_sys[0].std_day
query_services = json_data_sys;



str_data =JSON.stringify(query_services);
hidden_div.innerHTML = str_data;

// Find_parts 구현 onclick()
function findParts(){
  // findpart 다시 누를 때 query값으로 사라진 json데이터 다시 불러온다.
  if (service_stock.style.display == 'block') {
    service_stock.style.display = 'none';
    query_services = json_data_sys;
  }
  
  // 선택한 인벤토리 및 파트번호 찾기
  var sub_inv = document.getElementById('subinventory').value;
  var part_nm = document.getElementById('article_number').value;
  
  // 받은 argument가 'ALL' 일 경우 모든 것을 출력해줘야한다.
  let arr1 = [sub_inv, part_nm];
  
  for(i=0; i<arr1.length; i++){
    if (arr1[i] == 'ALL') {
      query_services =  query_services;
    } else {
        if (i==0) {
          query_services = query_services.filter(function(e){
        return e.subinventory === arr1[i];
    })
        } else {
          query_services = query_services.filter(function(e){
        return e.article_number === arr1[i];
    })
        }

    }
  }
  service_stock.style.display = 'block';
  // query된 값 다시 태그안에 넣어주기
  str_data =JSON.stringify(query_services);
  hidden_div.innerHTML = str_data;

  } //findPart 끝

//addirpart 시작
function findIrParts() {
  
   // findpart 다시 누를 때 query값으로 사라진 json데이터 다시 불러온다.
   if (ir_order_div.style.display == 'block') {
    ir_order_div.style.display = 'none';
    query_irs = json_ir_orders;
  }
  
  // 선택한 인벤토리 및 파트번호 찾기
  var myorder_list = document.getElementById('myorder_list').value;
  var ir_order_nm = document.getElementById('ir_order_nm').value;
  
  // myorder_list 에 만약에 값이 있다면 ir_order_nm은 진행 X
  if (myorder_list != '') {
    if (myorder_list == 'ALL') {
      query_irs = query_irs
    } else {
      query_irs = query_irs.filter(function(e){
        return e.order_nm === myorder_list;
      })
    }
  } else { // 나만의 오더를 입력하지 않은경우
    query_irs = query_irs.filter(function(e){
      return e.order_nm.includes(ir_order_nm)
    })
    
  }


  ir_order_div.style.display = 'block';
  // query된 값 다시 태그안에 넣어주기
  str_data_irs =JSON.stringify(query_irs);
  ir_hidden_div.innerHTML = str_data_irs;
}

//addpart 시작
function addIRPart(input_id) {
  //part부분
  // Select the table (well, tbody)
  var table_ap = document.querySelector('#add_part_table tbody')

  // 파트 중복 선택확인
  var children_ap = Array.from(table_ap.children)
  selected_list_ir = [];
  children_ap.forEach(e => {
    selected_list.push(parseInt(e.id.split("_")[2]))
  }); 
  
  input_ir_key = parseInt(input_id.split("_")[2]); //ts_key 만 추출 string type change to int type


  // 중복체크 구문 includes()
  select_is_mutiple = selected_list_ir.includes(input_ir_key)

  if (select_is_mutiple === true) {
    alert("이미 선택한 파트입니다. 중복선택 불가")
    return;
  }
  
  
  
  // 만족하는 json 행 찾기
  selected_ir_json = json_data_sys.filter(function(e){
        return e.ir_index === input_ir_key;  // djagno로 부터 받은 최초 table에서 해당 ts_key 조회로 행값 불러오기
  });
  



  // qty가 기존최대 값을 넘는지 확인해보기
  input_qty_ir = document.getElementById('parts_qty_'+input_ir_key.toString()).value;
  if (input_qty_ir > selected_ir_json[0].quantity) {
    // 받은 값이 tb 상의 값보다 클 경우 alert와 함께 addPart테이블에 추가하지 않고 함수종료
    alert('최대 요청 개수를 초과했습니다. 최대요청가능수량 : '+selected_ir_json[0].quantity.toString());
    return;
  }

  //add_part div display --> block div 보여주기
  var div_add_part = document.getElementById('add_part');
  if (div_add_part.style.display == 'none') {
    div_add_part.style.display = 'block';
  }


 
  //to_stock은 입력받기
  var f = selected_ir_json;
  // 로그인 된사람만 이용가능 -> eng일경우 본인의 trunckstock_id를 기본 value로 설정
  const trunckstock_id = "{{ user.userdetail.subinventory }}";
  subinventory_dl = document.getElementById('datalistOptions_sub').innerHTML
  subinventory_dl = `<input class="form-control" style="text-align:center;" list="datalistOptions_tosub" id="to_sub" name="to_sub_${f[0].ts_key}"  value="${trunckstock_id}" placeholder="Transfer할 Stock입력">` +
  '<datalist id="datalistOptions_tosub" name="subinventory_dl_tosub">' +
    subinventory_dl +  '</datalist>' 

  var ss_card = document.getElementById('add_part_card');

  result = `<tr id="tr_selected_ir_${f[0].ir_index}" name="tr_selected_${f[0].ir_index}">
        <td class="text-center">
          ${f[0].order_nm}
          <input type="hidden" name="prod_group${f[0].order_nm}" value="${f[0].order_nm}" >
        </td>
        <td class="text-center">
          ${f[0].article_number}
          <input type="hidden" name="article_number_ir_${f[0].ir_index}" value="${f[0].article_number}">
        </td>
        <td class="text-center">
          ${f[0].description}
          <input type="hidden" name="description" value="${f[0].description}">
        </td>
        <td class="text-center">
          ${f[0].subinventory}
          <input type="hidden" name="subinventory" value="${f[0].subinventory}">
        </td>
        <td class="text-center">
          ${subinventory_dl}
        </td>
        <td class="text-center">
          ${input_qty}
          <input type="hidden" name="input_qty_ir_${f[0].ir_index}" value="${input_qty}">
        </td>
        <td>
          <input type="button" value="Delete"  onClick="DeleteTr(this.id);" class="btn btn-fill btn-primary" id="parts_input_ir_${f[0].ir_index}" name="parts_input_ir_${f[0].ir_index}">  
        </td>
        </tr>`;
  table_ap.innerHTML += result;

 
  
  //part 부분끝 
}
//addpart 끝




//addpart 시작
function addPart(input_id) {
  //part부분
  // Select the table (well, tbody)
  var table_ap = document.querySelector('#add_part_table tbody')

  // 파트 중복 선택확인
  var children_ap = Array.from(table_ap.children)
  selected_list = [];
  children_ap.forEach(e => {
    selected_list.push(parseInt(e.id.split("_")[2]))
  }); 
  
  input_ts_key = parseInt(input_id.split("_")[2]); //ts_key 만 추출 string type change to int type


  // 중복체크 구문 includes()
  select_is_mutiple = selected_list.includes(input_ts_key)

  if (select_is_mutiple === true) {
    alert("이미 선택한 파트입니다. 중복선택 불가")
    return;
  }
  
  
  
  // 만족하는 json 행 찾기
  selected_ts_json = json_data_sys.filter(function(e){
        return e.ts_key === input_ts_key;  // djagno로 부터 받은 최초 table에서 해당 ts_key 조회로 행값 불러오기
  });
  



  // qty가 기존최대 값을 넘는지 확인해보기
  input_qty = document.getElementById('parts_qty_'+input_ts_key.toString()).value;
  if (input_qty > selected_ts_json[0].quantity) {
    // 받은 값이 tb 상의 값보다 클 경우 alert와 함께 addPart테이블에 추가하지 않고 함수종료
    alert('최대 요청 개수를 초과했습니다. 최대요청가능수량 : '+selected_ts_json[0].quantity.toString());
    return;
  }

  //add_part div display --> block div 보여주기
  var div_add_part = document.getElementById('add_part');
  if (div_add_part.style.display == 'none') {
    div_add_part.style.display = 'block';
  }


 
  //to_stock은 입력받기
  var f = selected_ts_json;
  // 로그인 된사람만 이용가능 -> eng일경우 본인의 trunckstock_id를 기본 value로 설정
  const trunckstock_id = "{{ user.userdetail.subinventory }}";
  subinventory_dl = document.getElementById('datalistOptions_sub').innerHTML
  subinventory_dl = `<input class="form-control" style="text-align:center;" list="datalistOptions_tosub" id="to_sub" name="to_sub_${f[0].ts_key}"  value="${trunckstock_id}" placeholder="Transfer할 Stock입력">` +
  '<datalist id="datalistOptions_tosub" name="subinventory_dl_tosub">' +
    subinventory_dl +  '</datalist>' 

  var ss_card = document.getElementById('add_part_card');

  result = `<tr id="tr_selected_${f[0].ts_key}" name="tr_selected_${f[0].ts_key}">
        <td class="text-center">
          ${f[0].prod_group}
          <input type="hidden" name="prod_group${f[0].prod_group}" value="${f[0].prod_group}" >
        </td>
        <td class="text-center">
          ${f[0].article_number}
          <input type="hidden" name="article_number_${f[0].ts_key}" value="${f[0].article_number}">
        </td>
        <td class="text-center">
          ${f[0].description}
          <input type="hidden" name="description" value="${f[0].description}">
        </td>
        <td class="text-center">
          ${f[0].subinventory}
          <input type="hidden" name="subinventory" value="${f[0].subinventory}">
        </td>
        <td class="text-center">
          ${subinventory_dl}
        </td>
        <td class="text-center">
          ${input_qty}
          <input type="hidden" name="input_qty_${f[0].ts_key}" value="${input_qty}">
        </td>
        <td>
          <input type="button" value="Delete"  onClick="DeleteTr(this.id);" class="btn btn-fill btn-primary" id="parts_input_${f[0].ts_key}" name="parts_input_${f[0].ts_key}">  
        </td>
        </tr>`;
  table_ap.innerHTML += result;

 
  
  //part 부분끝 
}
//addpart 끝


//////////////////////// 옵저빙 arae ////////////////////////////////

///////////////////////////////////////////////////////////////////
//////////////////////// parts 옵저빙 ////////////////////////////////
///////////////////////////////////////////////////////////////////
  // 옵저빙
// 1. 주기적으로 감지할 대상 요소 선정
const target = document.getElementById('service_stock');
 
// 2. 옵저버 콜백 생성
// const callback = (mutationList, observer) => {
//   alert('콜백시작');
//   console.log(mutationList)
//   // pagingTable();
// };
const observer = new MutationObserver( function( mutations ){
    mutations.forEach( function( mutation ){
        // Was it the style attribute that changed? (Maybe a classname or other attribute change could do this too? You might want to remove the attribute condition) Is display set to 'none'?
        if( mutation.attributeName === 'style' && window.getComputedStyle( target ).getPropertyValue( 'display' ) === 'block'
          ){
            changed_id = mutation.target.id;
            if (changed_id == 'service_stock' ) {
              renderTable_Part(query_services);
            }
        }
    } );
} );
 
// 3. 옵저버 인스턴스 생성
// const observer = new MutationObserver(callback); // 타겟에 변화가 일어나면 콜백함수를 실행하게 된다.
 
// 4. DOM의 어떤 부분을 감시할지를 옵션 설정
const config = { 
    attributes: true, // 속성 변화 할때 감지
    // childList: true, // 자식노드 추가/제거 감지
    // characterData: true // 데이터 변경전 내용 기록
};
 
// 5. 감지 시작
observer.observe( target, { attributes: true } );


///////////////////////////////////////////////////////////////////
/////////////////////////////// IR ORDER옵저빙 //////////////////////
const ir_target = document.getElementById('ir_order');
const ir_observer = new MutationObserver( function( mutations ){
    mutations.forEach( function( mutation ){
        // Was it the style attribute that changed? (Maybe a classname or other attribute change could do this too? You might want to remove the attribute condition) Is display set to 'none'?
        if( mutation.attributeName === 'style' && window.getComputedStyle( ir_target ).getPropertyValue( 'display' ) === 'block'
          ){
            changed_id = mutation.target.id;
            if (changed_id == 'ir_order' ) {
              renderTable_Irs(query_irs);
            }
        }
    } );
} );
const ir_config = { 
    attributes: true, // 속성 변화 할때 감지
};
 
// 5. 감지 시작
ir_observer.observe( ir_target, { attributes: true } );
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////

    // sort
  document.addEventListener('DOMContentLoaded', init, false);

  let data_service, table, table_ir, sortCol;
  let sortAsc = false;
  const pageSize = 15;
  let curPage = 1;

  async function init() {
    
    // Select the table (well, tbody)
    table = document.querySelector('#service_parts_table tbody');
    table_ir = document.querySelector('#ir_order_table tbody');
    // get the cats
    
    // renderTable_Part();
    
    // listen for sort clicks
    document.querySelectorAll('#service_parts_table thead tr th').forEach(t => {
      t.addEventListener('click', sort, false);
    });
    
    document.querySelector('#nextButton').addEventListener('click', nextPage, false);
    document.querySelector('#prevButton').addEventListener('click', previousPage, false);
  }

  function renderTable_Irs(get_json_db) {
        // db데이터받기
    var jons_irs = JSON.parse('{{ json_irs|safe }}');
    if (get_json_db == null) {
      get_json_db = jons_irs
    };

    var ss_card_ir = document.getElementById('ir_order_card');
    ss_card_ir.innerHTML = 'MY IR ORDERS' + ' 재고 기준 날짜 : '+ std_day

    // create html
    let result_ir = '';
    get_json_db.filter((row, index) => {
          let start = (curPage-1)*pageSize;
          let end =curPage*pageSize;
          if(index >= start && index < end) return true;
    }).forEach((c,idx) => {
//  
        result_ir += `<tr id="tr_ir_${c.ir_index}">
        <td class="text-center">${c.order_nm}</td>
        <td class="text-center">${c.article_number}</td>
        <td class="text-center">${c.description}</td>
        <td class="text-center">${c.subinventory}</td>
        <td class="text-center">
          <input type="number" value="${c.quantity}" min="0" max="${c.quantity}" class="form-control input-sm" id="parts_qty_ir_${c.ir_index}" name="parts_qty_ir_${c.ir_index}">  
        </td>
        <td>
          <input type="button" value="Select"  onClick="addIrPart(this.id);" class="btn btn-fill btn-primary" id="parts_input_ir_${c.ir_index}" name="parts_input_ir_${c.ir_index}">  
        </td>
        </tr>`;
    });
    table_ir.innerHTML = result_ir;
  }
  
  function renderTable_Part(get_json_db) {
        // db데이터받기
    var data_ts = '{{ data_ts|safe }}';
    var jons_ts = JSON.parse(data_ts)
    if (get_json_db == null) {
      get_json_db = jons_ts
    };

    var ss_card = document.getElementById('service_stock_card');
    ss_card.innerHTML = 'SERVICE STOCK' + ' 재고 기준 날짜 : '+ std_day

    // create html
    let result = '';
    get_json_db.filter((row, index) => {
          let start = (curPage-1)*pageSize;
          let end =curPage*pageSize;
          if(index >= start && index < end) return true;
    }).forEach((c,idx) => {
//  
        result += `<tr id="tr_${c.ts_key}">
        <td class="text-center">${c.prod_group}</td>
        <td class="text-center">${c.article_number}</td>
        <td class="text-center">${c.description}</td>
        <td class="text-center">${c.subinventory}</td>
        <td class="text-center">
          <input type="number" value="${c.quantity}" min="0" max="${c.quantity}" class="form-control input-sm" id="parts_qty_${c.ts_key}" name="parts_qty_${c.ts_key}">  
        </td>
        <td>
          <input type="button" value="Select"  onClick="addPart(this.id);" class="btn btn-fill btn-primary" id="parts_input_${c.ts_key}" name="parts_input_${c.ts_key}">  
        </td>
        </tr>`;
    });
    table.innerHTML = result;
  }

  function sort(e) {
    let thisSort = e.target.dataset.sort;
    if(sortCol === thisSort) sortAsc = !sortAsc;
    sortCol = thisSort;
    // console.log('sort dir is ', sortAsc);
    JSON.parse(hidden_div.innerHTML).sort((a, b) => {
      if(a[sortCol] < b[sortCol]) return sortAsc?1:-1;
      if(a[sortCol] > b[sortCol]) return sortAsc?-1:1;
      return 0;

    });
    renderTable_Part(JSON.parse(hidden_div.innerHTML));
  }

  function previousPage() {
    if(curPage > 1) curPage--;
    renderTable_Part(JSON.parse(hidden_div.innerHTML));
  }

  function nextPage() {
    if((curPage * pageSize) < JSON.parse(hidden_div.innerHTML).length) curPage++;
    renderTable_Part(JSON.parse(hidden_div.innerHTML));
  }



// Delete 선택항목삭제
function DeleteTr(td_id){
    // 삭제 
    var id_num = td_id.split("_")[2];
    var sel_tr_id = "tr_selected_" + id_num;
    var selected_tr = document.getElementById(sel_tr_id);
    selected_tr.remove();
    selected_list = selected_list.filter((element) => element !== parseInt(id_num));
	}
</script>
